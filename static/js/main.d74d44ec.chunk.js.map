{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filterText","selectParameter","filterTodosByText","event","setState","target","value","filterTodosByParameters","this","props","todos","selectedUserId","userBtnOnClick","filteredTodos","filter","todo","title","includes","completed","className","placeholder","onChange","name","map","key","id","classNames","type","checked","readOnly","userId","onClick","React","Component","defaultProps","PropTypes","arrayOf","shape","API_URL","getUser","fetch","then","response","json","data","CurrentUser","user","loadUser","prevProps","a","email","phone","App","changeSelectedUserId","clearSelectedUserId","ReactDOM","render","document","getElementById"],"mappings":"8ZAKaA,EAAb,4MACEC,MAAQ,CACNC,WAAY,GACZC,gBAAiB,OAHrB,EAMEC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZJ,WAAYG,EAAME,OAAOC,SAR/B,EAYEC,wBAA0B,SAACJ,GACzB,EAAKC,SAAS,CACZH,gBAAiBE,EAAME,OAAOC,SAdpC,4CAkBE,WACE,MAAkDE,KAAKC,MAA/CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,eAAgBC,EAA/B,EAA+BA,eAC/B,EAAwCJ,KAAKT,MAArCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,gBAEdY,EAAgBH,EACnBI,QACC,SAAAC,GAAI,OAAIA,EAAKC,OACRD,EAAKC,MAAMC,SAASjB,MAE1Bc,QACC,SAACC,GACC,OAAQd,GACN,IAAK,MACH,OAAO,EACT,IAAK,SACH,OAAQc,EAAKG,UACf,IAAK,YACH,OAAOH,EAAKG,UACd,QACE,OAAO,MAKjB,OACE,yBAAKC,UAAU,YACb,sCACA,yBAAKA,UAAU,4BACb,2CACA,2BACEA,UAAU,mBACVC,YAAY,aACZC,SAAUb,KAAKN,oBAEjB,4BACEoB,KAAK,SACLD,SAAUb,KAAKD,yBAEf,4BAAQD,MAAM,OAAd,OAGA,4BAAQA,MAAM,UAAd,UAGA,4BAAQA,MAAM,aAAd,cAKF,wBAAIa,UAAU,kBACXN,EAAcU,KAAI,SAAAR,GAAI,OACrB,wBACES,IAAKT,EAAKU,GACVN,UAAWO,IACT,iBAAkB,CAChB,0BAA2BX,EAAKG,UAChC,6BAA8BH,EAAKG,aAKvC,+BACE,2BACES,KAAK,WACLC,QAASb,EAAKG,UACdW,UAAQ,IAEV,2BAAId,EAAKC,QAGX,4BACEW,KAAK,SACLR,UAAWO,IACT,wBACA,SACA,CAAE,kCACFX,EAAKe,SAAWnB,IAElBoB,QAAS,kBAAMnB,EAAeG,EAAKe,UARrC,YAWGf,EAAKe,mBAnGxB,GAA8BE,IAAMC,WAyHpCnC,EAASoC,aAAe,CACtBxB,MAAOyB,IAAUC,QAAQD,IAAUE,MAAM,CACvCrB,MAAO,GACPE,WAAW,EACXY,OAAQ,M,UCjINQ,EAAO,iCAQN,IAAMC,EAAU,SAAAT,GAAM,OAAIU,MAAM,GAAD,OAAIF,EAAJ,kBAAqBR,IACxDW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIA,EAAKA,SCNRC,EAAb,4MACE9C,MAAQ,CACN+C,KAAM,MAFV,uDAKE,WACEtC,KAAKuC,aANT,gCASE,SAAmBC,GACbA,EAAUlB,SAAWtB,KAAKC,MAAMqB,QAClCtB,KAAKuC,aAXX,6DAeE,8BAAAE,EAAA,6DACUnB,EAAWtB,KAAKC,MAAhBqB,OADV,SAEqBS,EAAQT,GAF7B,OAEQgB,EAFR,OAIEtC,KAAKJ,SAAS,CAAE0C,SAJlB,gDAfF,0EAsBE,WACE,IAAQA,EAAStC,KAAKT,MAAd+C,KAER,OAAKA,EAKH,oCACE,yBAAK3B,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEG2B,EAAKrB,KAIV,wBAAIN,UAAU,qBAAqB2B,EAAKxB,MACxC,uBAAGH,UAAU,sBAAsB2B,EAAKI,OACxC,uBAAG/B,UAAU,sBAAsB2B,EAAKK,QAE1C,4BACExB,KAAK,SACLR,UAAU,qBACVY,QAASvB,KAAKC,MAAMG,gBAHtB,UAjBK,SA1Bb,GAAiCoB,IAAMC,WAuDvCY,EAAYX,aAAe,CACzBJ,OAAQ,M,ICJKsB,E,4MAjDbrD,MAAQ,CACNW,MAAO,GACPC,eAAgB,G,EASlB0C,qBAAuB,SAAC5B,GACtB,EAAKrB,SAAS,CAAEO,eAAgBc,K,EAGlC6B,oBAAsB,WACpB,EAAKlD,SAAS,CACZO,eAAgB,K,8FAZpB,4BAAAsC,EAAA,sEFTOT,MAAM,GAAD,OAAIF,EAAJ,WACTG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIA,EAAKA,QEOrB,OACQlC,EADR,OAGEF,KAAKJ,SAAS,CAAEM,UAHlB,gD,0EAgBA,WACE,MAAkCF,KAAKT,MAA/BW,EAAR,EAAQA,MAAOC,EAAf,EAAeA,eAEf,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACET,MAAOA,EACPE,eAAgBJ,KAAK6C,qBACrB1C,eAAgBA,KAIpB,yBAAKQ,UAAU,gBACb,yBAAKA,UAAU,0BACZR,EACC,kBAAC,EAAD,CACEmB,OAAQnB,EACRC,eAAgBJ,KAAK8C,sBAErB,0B,GA1CEtB,IAAMC,WCHxBsB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.d74d44ec.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    filterText: '',\n    selectParameter: 'all',\n  }\n\n  filterTodosByText = (event) => {\n    this.setState({\n      filterText: event.target.value,\n    });\n  };\n\n  filterTodosByParameters = (event) => {\n    this.setState({\n      selectParameter: event.target.value,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId, userBtnOnClick } = this.props;\n    const { filterText, selectParameter } = this.state;\n\n    const filteredTodos = todos\n      .filter(\n        todo => todo.title\n          && todo.title.includes(filterText),\n      )\n      .filter(\n        (todo) => {\n          switch (selectParameter) {\n            case 'all':\n              return true;\n            case 'active':\n              return !todo.completed;\n            case 'completed':\n              return todo.completed;\n            default:\n              return true;\n          }\n        },\n      );\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <span> Filter: </span>\n          <input\n            className=\"TodoList__filter\"\n            placeholder=\"enter todo\"\n            onChange={this.filterTodosByText}\n          />\n          <select\n            name=\"select\"\n            onChange={this.filterTodosByParameters}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  },\n                )\n                }\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected':\n                    todo.userId === selectedUserId },\n                  )}\n                  onClick={() => userBtnOnClick(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    userId: PropTypes.number,\n  })),\n  userBtnOnClick: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: '',\n    completed: false,\n    userId: 0,\n  })),\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate-api.herokuapp.com`;\n\nexport function getTodos() {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json())\n    .then(data => data.data);\n}\n\nexport const getUser = userId => fetch(`${API_URL}/users/${userId}`)\n  .then(response => response.json())\n  .then(data => data.data);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const { userId } = this.props;\n    const user = await getUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return null;\n    }\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear\"\n          onClick={this.props.userBtnOnClick}\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n\nCurrentUser.defaultProps = {\n  userId: null,\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number,\n  userBtnOnClick: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  changeSelectedUserId = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  clearSelectedUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            userBtnOnClick={this.changeSelectedUserId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                userBtnOnClick={this.clearSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}